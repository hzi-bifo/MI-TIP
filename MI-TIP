#!/bin/bash
####
## functions
####
test_dir(){ # test and open the directory
  if [ ! -d $1 ]; then
    mkdir $1
  fi
}

write_log(){
    echo -e $(date +"%T")"\t"$2 >> $1
}

test_file(){ # check file
  if [ ! -e $1 ];then
    write_log "ERROR: "$1" not found"
    exit $1" not found"
  fi
}

test_file $1
source $1
test_dir $TMP_DIR
export PATH=$PATH:$MITIP_HOME

# Workflow begins #
write_log $log_f 'Make gene regions'
make_GeneRegions.py --g $REF_GFF --f gene > $GENE_REGIONS

write_log $log_f 'Mapping'
make_genes_commands.py --l $FQ --r $REF_FASTA --g $GENE_REGIONS --t $TMP_DIR >  $mapping_commands
parallel -j $THR_NUM --joblog $mapping_log --retries 3 < $mapping_commands 

####
# List gene regions 
# input:
#	$REF_GFF
####
write_log $log_f 'Sort genes by family'
ls $TMP_DIR/*/stampy_with_bwa.fa | awk -F'/' '{print $(NF-1)"\t"$0}' > $seqfiles_list 
makeGroupFasta.py --l $seqfiles_list --d $GENE_FAMILY_SEQ_DIR --c $core_genes

#####
# Run alignment 
# input: 
#	$core_genes
####
test_dir $GENE_FAMILY_ALN_DIR
write_log $log_f 'Aligning gene sequences...'
makeGroupAln.py -f $core_genes -o $GENE_FAMILY_ALN_DIR -p 0 -a globalpair > $mafft_commands 
parallel -j $THR_NUM --retries 5 --joblog $mafft_log < $mafft_commands
ls $GENE_FAMILY_ALN_DIR/* > $aln_list

#####
# Filter the sequence groups by average sequence identity
# input: 
#	$aln_list
#####
Compute_avIdent.sh $aln_list >  $aln_ident_list
cat $aln_ident_list | sort -rnk 2 | awk -v c=$aln_ident_list_CUT '$2 > c'| awk '{print $1}' > $good_genes_list # quality control
concatenateAln.py --l  $good_genes_list --o $FINAL_ALN # make a concatenated alignment

#####
# Compute the phylogeny
# input: 
#	$FINAL_ALN
####
write_log $log_f 'Computing the tree...'
FastTreeMP -nt -gtr -gamma $FINAL_ALN > $FINAL_TREE
write_log $log_f '=DONE='

